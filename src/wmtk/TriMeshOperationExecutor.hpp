#pragma once
#include <wmtk/operations/tri_mesh/EdgeOperationData.hpp>
#include <wmtk/utils/Logger.hpp>
#include "TriMesh.hpp"
#include "Tuple.hpp"
namespace wmtk {


class TriMesh::TriMeshOperationExecutor : public operations::tri_mesh::EdgeOperationData
{
public:
    TriMeshOperationExecutor(TriMesh& m, const Tuple& operating_tuple);

    std::array<attribute::FlagAccessor<TriMesh>, 3> flag_accessors;
    attribute::Accessor<int64_t, TriMesh>& ff_accessor;
    attribute::Accessor<int64_t, TriMesh>& fe_accessor;
    attribute::Accessor<int64_t, TriMesh>& fv_accessor;
    attribute::Accessor<int64_t, TriMesh>& vf_accessor;
    attribute::Accessor<int64_t, TriMesh>& ef_accessor;

    /**
     * @brief jump to the next edge
     */
    Tuple next_edge(const Tuple& tuple) const;
    /**
     * @brief jump to the previous edge
     */
    Tuple prev_edge(const Tuple& tuple) const;

    /**
     * @brief gather all simplices that are deleted in a split
     *
     * The deleted simplices are exactly the open star of the edge
     */
    static const std::array<std::vector<int64_t>, 4> get_split_simplices_to_delete(
        const Tuple& tuple,
        const TriMesh& m);

    /**
     * @brief gather all simplices that are deleted in a collapse
     *
     * The deleted simplices are the intersection of the open star of the vertex and the closed star
     * of the edge. This comes down to one vertex, three edges, and two faces if the edge is on the
     * interior. On the boundary it is one vertex, two edges, and one face.
     */
    static const std::array<std::vector<int64_t>, 4> get_collapse_simplices_to_delete(
        const Tuple& tuple,
        const TriMesh& m);


    void update_ids_in_ear(const EarData& ear, const int64_t new_fid, const int64_t old_fid);

    void connect_ears();

    // historical precompute tooling
    void split_edge_precompute();
    void collapse_edge_precompute();

    void split_edge();
    void collapse_edge();

    /**
     * @brief
     *
     * @param new_fids_top the two new fids on the top sides of AB generated by split_edge(AB)
     * @param new_fids_bottom the two new fids on the bottom sides of AB generated by split_edge(AB)
     */
    // return the two new fids in order
    void replace_incident_face(IncidentFaceData& face_data);
    void create_spine_simplices();
    void fill_split_facet_data();
    void connect_faces_across_spine();

    TriMesh& m_mesh;


    IncidentFaceData get_incident_face_data(Tuple t);
};

} // namespace wmtk
