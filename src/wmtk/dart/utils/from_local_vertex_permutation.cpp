#include "from_local_vertex_permutation.hpp"
#include <wmtk/autogen/edge_mesh/autogenerated_tables.hpp>
#include <wmtk/autogen/tet_mesh/autogenerated_tables.hpp>
#include <wmtk/autogen/tri_mesh/autogenerated_tables.hpp>
namespace wmtk::dart::utils {
namespace {

template <size_t Rows, size_t Cols>
int8_t from_local_vertex_permutation(
    PrimitiveType pt,
    Eigen::Ref<const VectorX<int8_t>> permutation,
    const int8_t p[Rows][Cols])
{
    using CMT = typename Vector<int8_t, Cols>::ConstMapType;
    for (size_t j = 0; j < Rows; ++j) {
        auto x = CMT(p[j]);
        if (x == permutation) {
            return j;
        }
    }
    return -1;
}
} // namespace

int8_t from_local_vertex_permutation(
    PrimitiveType pt,
    Eigen::Ref<const VectorX<int8_t>> permutation)
{
    const static int8_t x = 1;
    switch (pt) {
    case PrimitiveType::Edge:
        return from_local_vertex_permutation<2>(pt, permutation, autogen::edge_mesh::permutations);
    case PrimitiveType::Triangle:
        return from_local_vertex_permutation<6>(pt, permutation, autogen::tri_mesh::permutations);
    case PrimitiveType::Tetrahedron:
        return from_local_vertex_permutation<24>(pt, permutation, autogen::tet_mesh::permutations);
    case PrimitiveType::Vertex: return 0;
    default: return -1;
    }
}
} // namespace wmtk::dart::utils
