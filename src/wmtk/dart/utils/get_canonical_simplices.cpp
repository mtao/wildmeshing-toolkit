#include <span>
#include <wmtk/autogen/edge_mesh/SimplexDart.hpp>
#include <wmtk/autogen/edge_mesh/autogenerated_tables.hpp>
#include <wmtk/autogen/tet_mesh/SimplexDart.hpp>
#include <wmtk/autogen/tet_mesh/autogenerated_tables.hpp>
#include <wmtk/autogen/tri_mesh/SimplexDart.hpp>
#include <wmtk/autogen/tri_mesh/autogenerated_tables.hpp>
#include <wmtk/dart/SimplexDart.hpp>

namespace wmtk::dart::utils {

inline std::span<const int8_t> get_canonical_simplices(const SimplexDart& sd, PrimitiveType pt)
{
    const PrimitiveType source_pt = sd.simplex_type();

    if (source_pt == PrimitiveType::Edge) {
        if (source_pt == pt) {
            const static std::array<int8_t, 1> x{{wmtk::autogen::edge_mesh::identity()}};
            return x;
        } else {
            return autogen::edge_mesh::canonical_simplex[get_primitive_type_id(pt)];
        }
    } else if (source_pt == PrimitiveType::Triangle) {
        if (source_pt == pt) {
            const static std::array<int8_t, 1> x{{wmtk::autogen::tri_mesh::identity()}};
            return x;
        } else {
            return autogen::tri_mesh::canonical_simplex[get_primitive_type_id(pt)];
        }
    } else if (source_pt == PrimitiveType::Tetrahedron) {
        if (source_pt == pt) {
            const static std::array<int8_t, 1> x{{wmtk::autogen::tet_mesh::identity()}};
            return x;
        } else {
            return autogen::tet_mesh::canonical_simplex[get_primitive_type_id(pt)];
        }
    }
    const static std::array<int8_t, 1> _{{0}};
    return _;
}
std::span<const int8_t> get_canonical_simplices(const PrimitiveType mesh_pt, PrimitiveType pt)
{
    return get_canonical_simplices(SimplexDart::get_singleton(mesh_pt), pt);
}
} // namespace wmtk::dart::utils
