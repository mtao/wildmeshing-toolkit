// DO NOT MODIFY, autogenerated from the /scripts directory
#include "autogenerated_tables.hpp"
#include "local_id_table_offset.hpp"
#include "subdart_maximal_action_to_face.hpp"
#include "SimplexDart.hpp"
namespace wmtk::autogen::{{ namespace }} {
int8_t subdart_maximal_action_to_face_action(int8_t dart_index, int8_t simplex_dimension, int8_t simplex_index)
{
    switch(simplex_dimension) {
        {% for dim in range( dimension - 1 ) %} 
        case {{ dim + 1 }}: return subdart_preserving_action_{{ dim + 1 }}[dart_index][simplex_index];
        {% endfor %}
        case 0:
        case {{ dimension }}:
        return identity();
        default:
        break;
    }
    assert(false);
    return 0;

}

int8_t subdart_maximal_action_to_face_size(int8_t dart_index, int8_t simplex_dimension, int8_t simplex_index)
{
    switch(simplex_dimension) {
        {% for dim in range( dimension - 1 ) %} 
        case {{ dim + 1 }}: return max_subdart_preservation_dimension_{{ dim + 1 }}[dart_index][simplex_index];
        {% endfor %}
        case {{ dimension }}:
        return {{ dimension }};
        case 0: return permutations[dart_index][0] == simplex_index;
        default:
        break;
    }
    return 0;

}

std::array<int8_t,2> subdart_maximal_action_to_face(int8_t dart_index, int8_t simplex_dimension, int8_t simplex_index) {

    switch(simplex_dimension) {
        {% for dim in range( dimension - 1 ) %} 
        case {{ dim + 1 }}: return 
        std::array<int8_t,2> {{ '{{' }}
        subdart_preserving_action_{{ dim + 1 }}[dart_index][simplex_index]
        ,
        max_subdart_preservation_dimension_{{ dim + 1 }}[dart_index][simplex_index]
        {{ '}}' }};
        {% endfor %}
        case {{ dimension }}:
        return std::array<int8_t,2> {{ '{{' }}
        identity(), {{ dimension }}
        {{ '}}' }};

        default:
        break;
    }
    assert(false);
    return {};
}
}

